package ggpt3

import (
	"context"
	"net/http"
)

// CompletionRequest represents a request for text completion.
type CompletionRequest struct {
	// ID of the model to use. You can use the List models API to see all of your available models,
	// or see our Model overview for descriptions of them.
	Model string `json:"model"`

	// The prompt(s) to generate completions for, encoded as a string, array of strings,
	// array of tokens, or array of token arrays.
	//
	// Note that <|endoftext|> is the document separator that the model sees during training,
	// so if a prompt is not specified the model will generate as if from the beginning of a new document.
	Prompt string `json:"prompt"`

	// The suffix that comes after a completion of inserted text.
	Suffix string `json:"suffix"`

	// The maximum number of tokens to generate in the completion.
	//
	// The token count of your prompt plus max_tokens cannot exceed the model's context length.
	// Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
	MaxTokens int `json:"max_tokens"`

	// What sampling temperature to use. Higher values means the model will take more risks.
	// Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
	//
	// It is generally recommended to alter this or `top_p` but not both.
	Temperature float64 `json:"tempature"`

	// An alternative to sampling with temperature, called nucleus sampling,
	// where the model considers the results of the tokens with top_p probability mass.
	// So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// It is generally recommended to alter this or `tempature` but not both.
	TopP float64 `json:"top_p"`

	// How many completions to generate for each prompt.
	N int `json:"n"`

	// Whether to stream back partial progress. If set, tokens will
	// be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
	Stream bool `json:"stream"`

	// Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example,
	// if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return
	//the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
	//
	// The maximum value for logprobs is 5. If you need more than this, please contact us through our Help center and describe your use case.
	LogProbs *int `json:"logprobs"`

	// Echo back the prompt in addition to the completion
	Echo bool `json:"echo"`

	// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
	Stop string `json:"stop"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether
	// they appear in the text so far, increasing the model's likelihood to talk about new topics.
	PresencePenalty float64 `json:"presence_penalty"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency
	// in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	FrequencyPenalty float64 `json:"frequency_penalty"`

	// Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token).
	// Results cannot be streamed.
	//
	// When used with n, best_of controls the number of candidate completions and n specifies how many to
	// return â€“ best_of must be greater than n.
	//
	// Note: Because this parameter generates many completions, it can quickly consume your token quota.
	// Use carefully and ensure that you have reasonable settings for max_tokens and stop.
	BestOf int `json:"best_of"`

	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer)
	// to an associated bias value from -100 to 100. You can use this tokenizer tool
	// (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically,
	// the bias is added to the logits generated by the model prior to sampling. The exact effect
	// will vary per model, but values between -1 and 1 should decrease or increase likelihood of
	// selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	// As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
	LogitBias map[string]int `json:"logit_bias"`

	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
	User string `json:"user"`
}

type Choice struct {
	Text         string `json:"text"`
	Index        int    `json:"index"`
	LogProbs     *int   `json:"logprobs"`
	FinishReason string `json:"finish_reason"`
}

type Usage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

type CompletionResponse struct {
	Id      string   `json:"id"`
	Object  string   `json:"object"`
	Created int      `json:"created"`
	Model   string   `json:"model"`
	Choices []Choice `json:"choices"`
	Usage   `json:"usage"`
}

// RequestCompletion creates a completion for the provided prompt and parameters
func (c *Client) RequestCompletion(ctx context.Context, cr *CompletionRequest) (*CompletionResponse, error) {
	req, err := c.newRequest(ctx, http.MethodPost, "/completions", cr)
	if err != nil {
		return nil, err
	}

	var cResp CompletionResponse
	err = c.sendRequest(req, &cResp)

	return &cResp, err
}
